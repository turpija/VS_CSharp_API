@model IEnumerable<Budget.MVC.Models.ExpenseView>


<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />


@{
    // set variables
    ViewBag.Title = "List";

    int TotalPages = ViewBag.TotalPages;
    int TotalCount = ViewBag.TotalCount;
    int ItemsPerPage = ViewBag.ItemsPerPage;
    int PageNumber = ViewBag.PageNumber;

}

@{
    // toggle sorting order
    bool sortToggle;
    if (ViewBag.SortOrderAsc == true)
    {
        sortToggle = false;
    }
    else
    {
        sortToggle = true;
    }
}

<h2>List of expenses</h2>
<p>
    @Html.ActionLink("Create New Item", "Create", new { }, new { @class = "btn btn-outline-success" })
</p>
<div>
    @using (Html.BeginForm(
            "List", "Expense",
            new { PageNumber = 1, OrderBy = ViewBag.OrderBy, SortOrderAsc = ViewBag.SortOrderAsc },
            FormMethod.Get))
    {
        <p>

            Find by name: @Html.TextBox("SearchString", "", new { @placeholder = "search..." })<br />
            Cost From: @Html.TextBox("CostFrom", "", new { @type = "number", @placeholder = "min value" })
            Cost To: @Html.TextBox("CostTo", "", new { @type = "number", @placeholder = "max value" })<br />
            Date From: @Html.TextBox("DateFrom", "", new { @type = "date" })
            Date To: @Html.TextBox("DateTo", "", new { @type = "date" })<br />
            @*@Html.DropDownListFor(item => item.Text,(IEnumerable<SelectListItem>)ViewBag.category, new { @class = "form-control" })*@

            @*model: @Model

                    @foreach (var item in ViewBag.Category)
                        {
                <p>@item.Text</p>
                        }*@

            @*@Html.DropDownListFor("item", ViewBag.Category)*@



            <input type="submit" value="search" class="btn btn-outline-secondary btn-sm " />
        </p>
    }
</div>
<hr />
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Name", "List", new
            {
                SearchString = Request.QueryString["SearchString"],
                CostFrom = Request.QueryString["CostFrom"],
                CostTo = Request.QueryString["CostTo"],
                PageNumber = PageNumber,
                OrderBy = "Name",
                SortOrderAsc = sortToggle
            }, new { @class = "btn btn-outline-secondary " })

        </th>
        <!--<th>
            Description-->
        @*@Html.Label("Description", htmlAttributes: new { @class = "btn  disabled" })*@
        <!--</th>-->
        <th>
            Person
            @*@Html.Label("Person", htmlAttributes: new { @class = "btn btn-sm disabled" })*@
        </th>
        <th>
            Category
            @*@Html.Label("Category", htmlAttributes: new { @class = "btn btn-sm disabled" })*@
        </th>
        <th>
            @Html.ActionLink("Date", "List", new
            {
                SearchString = Request.QueryString["SearchString"],
                CostFrom = Request.QueryString["CostFrom"],
                CostTo = Request.QueryString["CostTo"],
                PageNumber = PageNumber,
                OrderBy = "Date",
                SortOrderAsc = sortToggle
            }, new { @class = "btn btn-outline-secondary " })
        </th>
        <th>
            @Html.ActionLink("Cost", "List", new
            {
                SearchString = Request.QueryString["SearchString"],
                CostFrom = Request.QueryString["CostFrom"],
                CostTo = Request.QueryString["CostTo"],
                PageNumber = PageNumber,
                OrderBy = "Cost",
                SortOrderAsc = sortToggle
            }, new { @class = "btn btn-outline-secondary  " })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                <input type="text" name="name" value="@item.Name" disabled />
                @*@Html.DisplayFor(modelItem => item.Name)*@
            </td>
            @*<td>
                    <input type="type" name="name" value="@item.Description" disabled />
                    @Html.DisplayFor(modelItem => item.Description)
                </td>*@
            <td>
                <input type="text" name="username" value="@item.Person.Username" disabled />
                @*@Html.DisplayFor(modelItem => item.Person.Username)*@
            </td>
            <td>
                <input type="text" name="category" value="@item.Category.Name" disabled />
                @*@Html.DisplayFor(modelItem => item.Category.Name)*@
            </td>
            <td>
                <input type="text" name="date" value="@item.Date" disabled />
                @*@Html.DisplayFor(modelItem => item.Date)*@
            </td>
            <td>
                <input type="text" name="cost" value="@item.Cost" disabled />
                @*@Html.DisplayFor(modelItem => item.Cost)*@
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "btn btn-outline-secondary btn-sm " })
                @Html.ActionLink("Details", "Details", new { id = item.Id }, new { @class = "btn btn-outline-secondary btn-sm " })
                @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "btn btn-outline-danger btn-sm " })
            </td>
        </tr>
    }

</table>

<footer>
    Pages:
    <div class="btn-group" role="group">

        @for (int i = 1; i <= TotalPages; i++)
        {
            if (PageNumber == i)
            {@Html.ActionLink($"{i}", "List", new
            {
           SearchString = Request.QueryString["SearchString"],
           CostFrom = Request.QueryString["CostFrom"],
           CostTo = Request.QueryString["CostTo"],
           PageNumber = $"{i}",
           OrderBy = ViewBag.OrderBy,
           SortOrderAsc = ViewBag.SortOrderAsc
            },
       new { @class = "btn btn-secondary btn-sm disabled" }) ;
        }
        else
        { @Html.ActionLink($"{i}", "List", new
    {
      SearchString = Request.QueryString["SearchString"],
      CostFrom = Request.QueryString["CostFrom"],
      CostTo = Request.QueryString["CostTo"],
      PageNumber = $"{i}",
      OrderBy = ViewBag.OrderBy,
      SortOrderAsc = ViewBag.SortOrderAsc
    },
  new { @class = "btn btn-outline-secondary btn-sm" });
    }
}
    </div>
    <br />
    Total num of items: <strong>@TotalCount</strong><br />
    Total pages: <strong>@TotalPages</strong><br />
    Items per page: <strong>@ItemsPerPage</strong><br />
</footer>

